{"id":"concepts/datasource/factory","title":"Datasource Factory","contents":"<h1 id=\"the-data-source-factory\"><a href=\"#the-data-source-factory\" aria-hidden><span class=\"icon icon-link\"></span></a>The Data Source Factory</h1>\n<p>In the <a href=\"../introduction\">introduction</a> we covered the basic functionality of the datasource factory.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> dataSource <span class=\"token operator\">=</span> createDS<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">onTrigger</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<p>We provide a function to <code class=\"language-text\">onTrigger()</code> that returns <code class=\"language-text\">DataSourceOf&lt;T&gt;</code> which is a our datasource. The function can\nreturn a local collection or call the server to get a collection.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n \n<code class=\"language-text\">DataSourceOf</code>\n can be an Array, Promise or Observable.\n</blockquote>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n When creating a datasource, do it inside the class and apply the trigger handler using an arrow function. This will give you access to the class instance.\n</blockquote>\n<p>The factory contains internal logic that controls the trigger, calling it based on the configuration.</p>\n<h2 id=\"trigger-configuration\"><a href=\"#trigger-configuration\" aria-hidden><span class=\"icon icon-link\"></span></a>Trigger Configuration</h2>\n<p>The trigger is called when a data update is required by a source, the sources are:</p>\n<ul>\n<li>Manual - The user requested an update (manual trigger)</li>\n<li>Sort - Sort has changed and sorting trigger is enabled</li>\n<li>Filter - Filter has changed and filtering trigger is enabled</li>\n<li>Pagination - Pagination has changed and pagination trigger is enabled</li>\n</ul>\n<p>With each trigger the <code class=\"language-text\">PblDataSourceTriggerChangedEvent&lt;TData&gt;</code> object is provided, containing information about the sources for this trigger\nand any additional information available.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PblDataSourceTriggerChange</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  changed<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  prev<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n  curr<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PblDataSourceTriggerChangedEvent</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  filter<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> PblDataSourceTriggerChange<span class=\"token operator\">&lt;</span>DataSourceFilter<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  sort<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> PblDataSourceTriggerChange<span class=\"token operator\">&lt;</span>PblNgridDataSourceSortChange<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  pagination<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    changed<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n    page<span class=\"token punctuation\">:</span> PblDataSourceTriggerChange<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    perPage<span class=\"token punctuation\">:</span> PblDataSourceTriggerChange<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  data<span class=\"token punctuation\">:</span> PblDataSourceTriggerChange<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * Set the total length of the paginator (for server-side rendering, client-side pagination is automatically set)\n   */</span>\n  <span class=\"token function\">updateTotalLength</span><span class=\"token punctuation\">(</span>totalLength<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>Each property represent a trigger source (data represent the manual source).</p>\n<h3 id=\"manual-trigger\"><a href=\"#manual-trigger\" aria-hidden><span class=\"icon icon-link\"></span></a>Manual Trigger</h3>\n<p>A manual trigger is fired through the datasource by calling the <code class=\"language-text\">refresh()</code> method. It is also possible\nto provide an object that is passed on as a value.</p>\n<div pbl-example-view=\"pbl-manual-datasource-trigger-component\" containerClass=\"table-height-300 mat-elevation-z7\"></div>\n<p>In this example each button will trigger a refresh with a passed parameter, the number of items to return.</p>\n<p>Note that we provide a second type parameter to the factory function:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">createDS<span class=\"token operator\">&lt;</span>Person<span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div></div>\n<p>This will set the type in the <code class=\"language-text\">data</code> property of the event. This type is by default <code class=\"language-text\">T[]</code> so <code class=\"language-text\">createDS&lt;Person&gt;()</code> is actually <code class=\"language-text\">createDS&lt;Person, Person[]&gt;()</code></p>\n<h3 id=\"sort-filter-and-pagination-trigger\"><a href=\"#sort-filter-and-pagination-trigger\" aria-hidden><span class=\"icon icon-link\"></span></a>Sort, Filter and Pagination trigger</h3>\n<p>Let's review the source for each trigger:</p>\n<ul>\n<li>Sort - Calling the <code class=\"language-text\">setSort</code> method on the datasource</li>\n<li>Filter - Calling the <code class=\"language-text\">setFilter</code> method on the datasource</li>\n<li>Pagination - Changes in the paginator event (page, itemsPerPage)</li>\n</ul>\n<p>The default behavior is suited for client side mode where all data is available in a single collection. In this scenario the triggers are handled\ninternally because all the information requires is available to the factory.</p>\n<p>To enable custom triggering we need to tell the factory which one, during the definition.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> dsCustomTrigger <span class=\"token operator\">=</span> createDS<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">setCustomTriggers</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pagination'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sort'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">onTrigger</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span><span class=\"token function\">getPeople</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<p>This is suitable for remote data sources that return paginated responses (which forces sorting and filtering on the server).</p>\n<p>For demonstration we enabled <strong>pagination</strong> and <strong>sorting</strong>, but NOT <strong>filtering</strong>, which will result in a per page filter behavior.</p>\n<div pbl-example-view=\"pbl-enabling-custom-triggers-example-component\" containerClass=\"table-height-300 mat-elevation-z7\"></div>\n<h2 id=\"skipping-initial-update\"><a href=\"#skipping-initial-update\" aria-hidden><span class=\"icon icon-link\"></span></a>Skipping initial update</h2>\n<p>By default the datasource will invoke an initial trigger once it is created, this is usually preferred.</p>\n<p>In some scenarios, usually in server side mode, we want to defer this trigger and call it manually at a later point in time.\nFor example, once we get some input parameters from the user or once other calls finish.</p>\n<p>To skip the initial trigger we use <code class=\"language-text\">skipInitialTrigger()</code>:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> dataSource <span class=\"token operator\">=</span> createDS<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">skipInitialTrigger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">onTrigger</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<h2 id=\"keep-alive\"><a href=\"#keep-alive\" aria-hidden><span class=\"icon icon-link\"></span></a>Keep Alive</h2>\n<p>By default the datasource will be bound to the table, once the table component is destroyed the datasource is destroyed.\nThis is usually the preferred behavior as it automatically manages memory cleanup for the datasource.</p>\n<p>We can change the default behavior and keep the datasource around even if the table is destroyed. This will require that\nwe destroy the datasource manually or we will experience memory leaks.</p>\n<p>This is behavior is useful when moving a datasource between tables, e.g. <code class=\"language-text\">*ngIf</code></p>\n<p>To persist the datasource between tables we use <code class=\"language-text\">keepAlive()</code>:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> dataSource <span class=\"token operator\">=</span> createDS<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">keepAlive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">onTrigger</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n"}