{"id":"plugins/ngrid-material/pagination","title":"Pagination","contents":"<h1 id=\"pagination\"><a href=\"#pagination\" aria-hidden><span class=\"icon icon-link\"></span></a>Pagination</h1>\n<p>The table comes with native support for <strong>logical</strong> pagination in 3 flavors:</p>\n<ul>\n<li>\n<p>Synchronous (client side)</p>\n<ul>\n<li>Client Side</li>\n</ul>\n</li>\n<li>\n<p>Asynchronous (server side)</p>\n<ul>\n<li>Page number</li>\n<li>Tokens</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"logical-pagination\"><a href=\"#logical-pagination\" aria-hidden><span class=\"icon icon-link\"></span></a>Logical Pagination</h2>\n<p>Logical pagination means that the table does not include any concrete UI implementation, this is provided by plugins.\nIn the following examples we use the <code class=\"language-text\">@pebula/ngrid/mat-paginator</code> which is a  paginator based on the Material Design spec.</p>\n<p>In fact, pagination itself is a native datasource feature and the table does not handle any logic, only the datasource.</p>\n<h2 id=\"synchronousclient-side-pagination\"><a href=\"#synchronousclient-side-pagination\" aria-hidden><span class=\"icon icon-link\"></span></a>Synchronous/Client-Side Pagination</h2>\n<p>Client side pagination is applied when the entire datasource is available offline or fetched once from the server.</p>\n<p>In this scenario the entire process is handled automatically by the table, based on external configuration input.</p>\n<div pbl-example-view=\"pbl-pagination-example\"></div>\n<p>Changing the current pages done synchronously because the data exists.</p>\n<h2 id=\"asynchronous-server-side\"><a href=\"#asynchronous-server-side\" aria-hidden><span class=\"icon icon-link\"></span></a>Asynchronous (server side)</h2>\n<p>Server side pagination is applied when the datasource is incomplete, only portions of it are fetched each time.\nFor example, if the entire record-set is 1 million records we might want to fetch 20, 50 or 100 at a time.</p>\n<p>In this mode the developer must provide the data when a page has changed, this is because it requires a call to the server.</p>\n<h3 id=\"page-number\"><a href=\"#page-number\" aria-hidden><span class=\"icon icon-link\"></span></a>Page number</h3>\n<p>Page number pagination is applied when the server expects metadata that describe the boundaries of the data we want.\nFor example, the server might expect the total numbers of rows per page and the page we want or the number of rows to\nSKIP and the number or rows to TAKE.</p>\n<p>Regardless, it is the same information, transforming from one method to the other is simple math.</p>\n<div pbl-example-view=\"pbl-async-page-number-example\"></div>\n<h3 id=\"tokens\"><a href=\"#tokens\" aria-hidden><span class=\"icon icon-link\"></span></a>Tokens</h3>\n<p>Token pagination is applied when the server expects an initial request with metadata the describes the boundaries of the data we want.\nFrom that point, the response is the data set with an additional token that we can use to get the next page.</p>\n<p>With this method might be missing the total amount of rows/pages depending on the implementation.</p>\n<div pbl-example-view=\"pbl-async-token-example\"></div>\n"}